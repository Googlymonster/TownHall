{"ast":null,"code":"var _jsxFileName = \"/Users/kevinnguyen/Projects/TownHall/townhall-client/src/pages/user.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Shout from \"../components/shout/Shout\";\nimport StaticProfile from \"../components/profile/StaticProfile\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ShoutSkeleton from \"../util/ShoutSkeleton\";\nimport ProfileSkeleton from \"../util/ProfileSkeleton\";\nimport { connect } from \"react-redux\";\nimport { getUserData } from \"../redux/actions/dataActions\";\n\nclass user extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      profile: null,\n      shoutIdParam: null\n    };\n  }\n\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n    const shoutId = this.props.match.params.shoutId;\n    if (shoutId) this.setState({\n      shoutIdParam: shoutId\n    });\n    this.props.getUserData(handle);\n    axios.get(`/user/${handle}`).then(res => {\n      this.setState({\n        profile: res.data.user\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      shouts,\n      loading\n    } = this.props.data;\n    const {\n      shoutIdParam\n    } = this.state;\n    const shoutsMarkup = loading ? /*#__PURE__*/React.createElement(ShoutSkeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }) : shouts === null ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, \"No shouts from this user\") : !shoutIdParam ? shouts.map(shout => /*#__PURE__*/React.createElement(Shout, {\n      key: shout.shoutId,\n      shout: shout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 29\n      }\n    })) : shouts.map(shout => {\n      if (shout.shoutId !== shoutIdParam) return /*#__PURE__*/React.createElement(Shout, {\n        key: shout.shoutId,\n        shout: shout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 18\n        }\n      });else return /*#__PURE__*/React.createElement(Shout, {\n        key: shout.shoutId,\n        shout: shout,\n        openDialog: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 8,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, shoutsMarkup), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 4,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, this.state.profile === null ? /*#__PURE__*/React.createElement(ProfileSkeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(StaticProfile, {\n      profile: this.state.profile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps, {\n  getUserData\n})(user);","map":{"version":3,"sources":["/Users/kevinnguyen/Projects/TownHall/townhall-client/src/pages/user.js"],"names":["React","Component","PropTypes","axios","Shout","StaticProfile","Grid","ShoutSkeleton","ProfileSkeleton","connect","getUserData","user","state","profile","shoutIdParam","componentDidMount","handle","props","match","params","shoutId","setState","get","then","res","data","catch","err","console","log","render","shouts","loading","shoutsMarkup","map","shout","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Shout from \"../components/shout/Shout\";\nimport StaticProfile from \"../components/profile/StaticProfile\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport ShoutSkeleton from \"../util/ShoutSkeleton\";\nimport ProfileSkeleton from \"../util/ProfileSkeleton\";\n\nimport { connect } from \"react-redux\";\nimport { getUserData } from \"../redux/actions/dataActions\";\n\nclass user extends Component {\n  state = {\n    profile: null,\n    shoutIdParam: null,\n  };\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n    const shoutId = this.props.match.params.shoutId;\n\n    if (shoutId) this.setState({ shoutIdParam: shoutId });\n\n    this.props.getUserData(handle);\n    axios\n      .get(`/user/${handle}`)\n      .then((res) => {\n        this.setState({\n          profile: res.data.user,\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n  render() {\n    const { shouts, loading } = this.props.data;\n    const { shoutIdParam } = this.state;\n\n    const shoutsMarkup = loading ? (\n      <ShoutSkeleton />\n    ) : shouts === null ? (\n      <p>No shouts from this user</p>\n    ) : !shoutIdParam ? (\n      shouts.map((shout) => <Shout key={shout.shoutId} shout={shout} />)\n    ) : (\n      shouts.map((shout) => {\n        if (shout.shoutId !== shoutIdParam)\n          return <Shout key={shout.shoutId} shout={shout} />;\n        else return <Shout key={shout.shoutId} shout={shout} openDialog />;\n      })\n    );\n    return (\n      <Grid container spacing={3}>\n        <Grid item sm={8} xs={12}>\n          {shoutsMarkup}\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          {this.state.profile === null ? (\n            <ProfileSkeleton />\n          ) : (\n            <StaticProfile profile={this.state.profile} />\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.data,\n});\n\nexport default connect(mapStateToProps, { getUserData })(user);\n"]},"metadata":{},"sourceType":"module"}