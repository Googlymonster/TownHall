{"ast":null,"code":"import { SET_SHOUTS, LIKE_SHOUT, UNLIKE_SHOUT, LOADING_DATA, DELETE_SHOUT, POST_SHOUT, SET_SHOUT, SUBMIT_COMMENT } from \"../types\";\nconst initialState = {\n  shouts: [],\n  shout: {},\n  loading: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case LOADING_DATA:\n      return { ...state,\n        loading: true\n      };\n\n    case SET_SHOUTS:\n      return { ...state,\n        shouts: action.payload,\n        loading: false\n      };\n\n    case SET_SHOUT:\n      return { ...state,\n        shout: action.payload\n      };\n\n    case LIKE_SHOUT:\n    case UNLIKE_SHOUT:\n      let index = state.shouts.findIndex(shout => shout.shoutId === action.payload.shoutId);\n      state.shouts[index] = action.payload;\n\n      if (state.shout.shoutId === action.payload.shoutId) {\n        state.shout = action.payload;\n      }\n\n      return { ...state\n      };\n\n    case DELETE_SHOUT:\n      index = state.shouts.findIndex(shout => shout.shoutId === action.payload);\n      state.shouts.splice(index, 1);\n      return { ...state\n      };\n\n    case POST_SHOUT:\n      return { ...state,\n        shouts: [action.payload, ...MediaStreamTrackAudioSourceNode.s]\n      };\n  }\n}","map":{"version":3,"sources":["/Users/kevinnguyen/Projects/TownHall/townhall-client/src/redux/reducers/dataReducer.js"],"names":["SET_SHOUTS","LIKE_SHOUT","UNLIKE_SHOUT","LOADING_DATA","DELETE_SHOUT","POST_SHOUT","SET_SHOUT","SUBMIT_COMMENT","initialState","shouts","shout","loading","state","action","type","payload","index","findIndex","shoutId","splice","MediaStreamTrackAudioSourceNode","s"],"mappings":"AAAA,SACEA,UADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,YALF,EAMEC,UANF,EAOEC,SAPF,EAQEC,cARF,QASO,UATP;AAWA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGJ,YAAjB,EAA+BK,MAA/B,EAAuC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKX,YAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHD,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKX,UAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHH,QAAAA,MAAM,EAAEI,MAAM,CAACE,OAFZ;AAGHJ,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKL,SAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFX,OAAP;;AAIJ,SAAKd,UAAL;AACA,SAAKC,YAAL;AACI,UAAIc,KAAK,GAAGJ,KAAK,CAACH,MAAN,CAAaQ,SAAb,CACPP,KAAD,IAAWA,KAAK,CAACQ,OAAN,KAAkBL,MAAM,CAACE,OAAP,CAAeG,OADpC,CAAZ;AAGAN,MAAAA,KAAK,CAACH,MAAN,CAAaO,KAAb,IAAsBH,MAAM,CAACE,OAA7B;;AACA,UAAGH,KAAK,CAACF,KAAN,CAAYQ,OAAZ,KAAwBL,MAAM,CAACE,OAAP,CAAeG,OAA1C,EAAmD;AAC/CN,QAAAA,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACE,OAArB;AACH;;AACD,aAAO,EACH,GAAGH;AADA,OAAP;;AAGJ,SAAKR,YAAL;AACIY,MAAAA,KAAK,GAAGJ,KAAK,CAACH,MAAN,CAAaQ,SAAb,CACHP,KAAD,IAAWA,KAAK,CAACQ,OAAN,KAAkBL,MAAM,CAACE,OADhC,CAAR;AAGAH,MAAAA,KAAK,CAACH,MAAN,CAAaU,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;AACA,aAAO,EACH,GAAGJ;AADA,OAAP;;AAGJ,SAAKP,UAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHH,QAAAA,MAAM,EAAE,CAACI,MAAM,CAACE,OAAR,EAAiB,GAAGK,+BAA+B,CAACC,CAApD;AAFL,OAAP;AAtCR;AA2CH","sourcesContent":["import {\n  SET_SHOUTS,\n  LIKE_SHOUT,\n  UNLIKE_SHOUT,\n  LOADING_DATA,\n  DELETE_SHOUT,\n  POST_SHOUT,\n  SET_SHOUT,\n  SUBMIT_COMMENT,\n} from \"../types\";\n\nconst initialState = {\n  shouts: [],\n  shout: {},\n  loading: false,\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case LOADING_DATA:\n            return {\n                ...state,\n                loading: true\n            };\n        case SET_SHOUTS:\n            return {\n                ...state,\n                shouts: action.payload,\n                loading: false\n            };\n        case SET_SHOUT:\n            return {\n                ...state,\n                shout: action.payload\n            };\n        case LIKE_SHOUT:\n        case UNLIKE_SHOUT:\n            let index = state.shouts.findIndex(\n                (shout) => shout.shoutId === action.payload.shoutId\n            );\n            state.shouts[index] = action.payload;\n            if(state.shout.shoutId === action.payload.shoutId) {\n                state.shout = action.payload;\n            }\n            return {\n                ...state\n            };\n        case DELETE_SHOUT:\n            index = state.shouts.findIndex(\n                (shout) => shout.shoutId === action.payload\n            );\n            state.shouts.splice(index, 1);\n            return {\n                ...state\n            };\n        case POST_SHOUT:\n            return {\n                ...state,\n                shouts: [action.payload, ...MediaStreamTrackAudioSourceNode.s]\n            }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}